swagger: "2.0"
info:
  version: "1.5.0"
  title: ZXInfo API
  description: |
    Welcome to the world's (probaly) greatest Sinclair API!.

    This ZXDB based API is a tool to help developers everywhere create amazing and incredible web sites and apps using data from the 40-plus years area of Sinclair home computers (and clones).

    **Ready** to get started?

    This is the short version of what you need to do:
    * Be a good API citizen, read and understand how to use the API
    * Keep in touch: tell us about what you're building and talk to other developers
    * Build cool stuff

    The ZXInfo API is also the backend for the web site https://zxinfo.dk

    Remember that the ZXInfo API suite and portal is an evolving project, developed by dedicated people in their spare time. To the extent that it is possible, we will try to limit any modifications which cause backwards incompatible changes to applications.

    Most communication will occur on the community forum on https://spectrumcomputing.co.uk/forums/

    **KNOWN CLIENTS using ZXInfo API**

    If you want to check out how the ZXInfo API is being used, please checkout the following:

    * Web site https://zxinfo.dk - a full featured web site build using AngularJS and Material design
    * Android [Zx App](https://play.google.com/store/apps/details?id=com.bricboys.zxapp) - ZX Spectrum stuff search engine
    * SpeccyBot https://github.com/druellan/speccybot - an interactive chat bot for Telegram that allows searching online for Spectrum related information.
    * Emulator [ZEsarUX](https://github.com/chernandezba/zesarux) - ZX Second-Emulator And Released for UniX.
    * ZXInfoTV [AppleTV](https://github.com/thomasheckmann/zxinfo-tv) - a video focused experiece for your AppleTV

    **ZXDB update 15.05.2020**

  contact:
    name: ZXInfo API development
    email: zxinfo_dev@kolbeck.dk
host: api.zxinfo.dk
basePath: /api/zxinfo
tags:
  - name: "zxinfo"
    description: "(Almost) Everything about Sinclair-related material including software, hardware, books, magazines, etc."
    externalDocs:
      description: "Find out more"
      url: "https://zxinfo.dk"
schemes:
  - https
consumes:
  - application/json
produces:
  - application/json
paths:
  /v2/search:
    get:
      tags:
        - "zxinfo"
      summary: "General search for entries"
      description: |
        Returns a List of entries matching input filters.

        The search will match input in the following document properties:
          * fulltitle
          * re-released title
          * publisher
          * re-released publisher
          * author, alias and group

        Additional options can be specified to futher narrow down search.

      operationId: "searchAndFilter"
      produces:
        - "application/json"
      parameters:
        - name: "query"
          in: query
          description: "something to query for"
          type: string
          required: false
        - name: mode
          in: query
          description: Specifies if returned JSON should be 'tiny', 'compact' or 'full'
          required: false
          default: "compact"
          type: string
        - name: sort
          in: query
          description: Specifies sorting mode. Can be on of title_asc, title_desc, date_asc or date_desc, rel_asc or rel_desc.
          required: false
          default: "rel_desc"
          type: string
        - name: "contenttype"
          in: query
          description: "Filter by contenttype: SOFTWARE, HARDWARE, BOOK"
          type: string
          required: false
        - name: "language"
          in: query
          description: "Filter by language: English, Spanish, ..."
          type: string
          required: false
        - name: "year"
          in: query
          description: "Filter by year of release"
          type: string
          required: false
        - name: "genretype"
          in: query
          description: "Filter by genretype, e.g. 'Arcade Game'"
          type: string
          required: false
        - name: "genresubtype"
          in: query
          description: "Filter by genresubtype, e.g. 'Action'"
          type: string
          required: false
        - name: "machinetype"
          in: query
          description: "Filter by machinetype, e.g. 'ZX-Spectrum 48K'"
          type: string
          required: false
        - name: "controls"
          in: query
          description: "Filter by controls, e.g. 'Kempston'"
          type: string
          required: false
        - name: "multiplayermode"
          in: query
          description: "Filter by multiplayermode, e.g. 'Turn based'"
          type: string
          required: false
        - name: "multiplayertype"
          in: query
          description: "Filter by multiplayertype, e.g. 'Versus'"
          type: string
          required: false
        - name: "originalpublication"
          in: query
          description: "Filter by originalpublication, e.g. 'Type-in'"
          type: string
          required: false
        - name: "availability"
          in: query
          description: "Filter by availability, e.g. 'Never released'"
          type: string
          required: false
        - name: "group"
          in: query
          description: "Filter by group. See ZXDB documentation"
          type: string
          required: false
        - name: "groupname"
          in: query
          description: "Filter by groupname. See ZXDB documentation"
          type: string
          required: false
        - name: size
          in: query
          description: Specifies the page size for pagination. If used in combination with offset=random, max value allowed is 10.
          required: true
          type: integer
        - name: offset
          in: query
          description: Specifies the page offset for pagination. If 'random' used in combination with size to fetct random documents.
          required: true
          type: integer
      responses:
        # Response code
        200:
          description: "successful operation, JSON document with details"

  /games/{game-id}:
    get:
      tags:
        - "zxinfo"
      summary: "Fetches a single entry by id"
      description: |
        This method fetches a single entry resource. It is the canonical URI for any entry resource provided by the API. Can be shared on e.g. facebook for a direct link to an entry

      operationId: "getGameById"
      produces:
        - "application/json"
      parameters:
        - name: "game-id"
          in: path
          description: An entry id (WoS compatible, e.g. 0002259), left padded with 0's if less than 7 digits.
          type: string
          required: true
        - name: mode
          in: query
          description: Specifies if returned JSON should be 'tiny', 'compact' or 'full'
          required: false
          default: "compact"
          type: string
      responses:
        # Response code
        200:
          description: OK
        400:
          description: Bad request. Entry id must be an integer. larger than 0 and max 7 digits.
        404:
          description: An entry with the specified ID was not found.

  /games/random/{total}:
    get:
      tags:
        - "zxinfo"
      summary: "Fetches list of random entries"
      description: |
        Fetches a list of random SOFTWARE entries from the categories:
        * Adventure Game
        * Arcade Game
        * Casual Game
        * Game
        * Sport Game
        * Strategy Game

        All returned items has loading screen.

      operationId: "getRandomGames"
      produces:
        - "application/json"
      parameters:
        - name: "total"
          in: path
          description: total number of entries to return
          type: string
          required: true
        - name: mode
          in: query
          description: Specifies if returned JSON should be 'tiny', 'tiny', 'compact' or 'full'. Defaults to 'tiny'.
          required: false
          default: "tiny"
          type: string
      responses:
        # Response code
        200:
          description: OK
        400:
          description: Bad request. Entry id must be an integer. larger than 0 and max 7 digits.
        404:
          description: An entry with the specified ID was not found.

  /games/randomwithvideos/{total}:
    get:
      tags:
        - "zxinfo"
      summary: "Fetches list of random entries with YouTube links"
      description: |
        Fetches a list of random SOFTWARE entries with YouTube links.

        All returned items has loading screen.

      operationId: "getRandomGamesWithVideos"
      produces:
        - "application/json"
      parameters:
        - name: "total"
          in: path
          description: total number of entries to return
          type: string
          required: true
        - name: mode
          in: query
          description: Specifies if returned JSON should be 'tiny', 'tiny', 'compact' or 'full'. Defaults to 'tiny'.
          required: false
          default: "tiny"
          type: string
      responses:
        # Response code
        200:
          description: OK
        400:
          description: Bad request. Entry id must be an integer. larger than 0 and max 7 digits.
        404:
          description: An entry with the specified ID was not found.

  /publishers/{publisher-name}/games:
    get:
      summary: "Fetches list of entries filtered by publisher"
      description: |
        Fetches list of entries from a specific publisher, including:
        * publisher.name
        * releases.publisher.name

      tags:
        - "zxinfo"
      parameters:
        - name: publisher-name
          in: path
          description: Specifies name of publisher to lookup
          required: true
          type: string
        - name: size
          in: query
          description: Specifies the page size for pagination
          required: true
          type: integer
        - name: offset
          in: query
          description: Specifies the page offset for pagination
          required: true
          type: integer
        - name: mode
          in: query
          description: Specifies if returned JSON should be 'tiny', 'compact' or 'full'
          required: false
          default: "compact"
          type: string
        - name: sort
          in: query
          description: Specifies sorting mode. Can be on of title_asc, title_desc, date_asc or date_desc.
          required: false
          default: "date_desc"
          type: string
      responses:
        # Response code
        200:
          description: |
            An array of games. Adds *X-Total-Count* to reponse header.

  /publishers/{publisher-name}/games/{game-title}:
    get:
      summary: Fetches entry by publisher with title
      description: |
        Publisher name is matched against:
        * publisher.name
        * releases.publisher.name

        Returns a single game
      tags:
        - "zxinfo"
      parameters:
        - name: publisher-name
          in: path
          description: Publisher or author to query
          required: true
          type: string
        - name: game-title
          in: path
          description: Title to query
          required: true
          type: string
        - name: mode
          in: query
          description: Specifies if returned JSON should be 'tiny', 'compact' or 'full'
          required: false
          default: "compact"
          type: string
      responses:
        # Response code
        200:
          description: "successful operation, JSON document with details"
        404:
          description: An entry with specified publisher and title was not found.

  /authors/{author-name}/games:
    get:
      summary: "Fetches list of entries filtered by author"
      description: |
        Fetches list of entries from a specific author, including:
        * author.name
        * authors.group

      tags:
        - "zxinfo"
      parameters:
        - name: author-name
          in: path
          description: Specifies name of author to lookup
          required: true
          type: string
        - name: size
          in: query
          description: Specifies the page size for pagination
          required: true
          type: integer
        - name: offset
          in: query
          description: Specifies the page offset for pagination
          required: true
          type: integer
        - name: mode
          in: query
          description: Specifies if returned JSON should be 'tiny', 'compact' or 'full'
          required: false
          default: "compact"
          type: string
        - name: sort
          in: query
          description: Specifies sorting mode. Can be on of title_asc, title_desc, date_asc or date_desc.
          required: false
          default: "date_desc"
          type: string
      responses:
        # Response code
        200:
          description: |
            An array of games. Adds *X-Total-Count* to reponse header.

  /v2/magazines/:
    get:
      tags:
        - "zxinfo"
      summary: "Fetches all magazines"
      description: |
        This method fetches basic info for all magazines.
      operationId: "getAllMagazines"
      produces:
        - "application/json"
      parameters:
        - name: size
          in: query
          description: Specifies the page size for pagination
          required: true
          type: integer
        - name: offset
          in: query
          description: Specifies the page offset for pagination
          required: true
          type: integer
        - name: sort
          in: query
          description: Specifies sorting mode. Can be on of name_asc, name_desc.
          required: false
          default: "name_asc"
          type: string
      responses:
        # Response code
        200:
          description: |
            An array of magazines. Adds *X-Total-Count* to reponse header.

  /v2/magazines/search/{name}:
    get:
      tags:
        - "zxinfo"
      summary: "Search for magazines"
      description: |
        This method fetches basic info for searched magazines.
      operationId: "getMagazines"
      produces:
        - "application/json"
      parameters:
        - name: "name"
          type: string
          required: true
          in: path
          description: Something to search for
        - name: size
          in: query
          description: Specifies the page size for pagination
          required: true
          type: integer
        - name: offset
          in: query
          description: Specifies the page offset for pagination
          required: true
          type: integer
        - name: sort
          in: query
          description: Specifies sorting mode. Can be on of name_asc, name_desc.
          required: false
          default: "name_asc"
          type: string
      responses:
        # Response code
        200:
          description: |
            An array of magazines. Adds *X-Total-Count* to reponse header.

  /v2/magazines/{magazine-name}:
    get:
      tags:
        - "zxinfo"
      summary: "Fetches a single magazine by name"
      description: |
        This method fetches a single magazine resource. It is the canonical URI for any entry resource provided by the API. Can be shared on e.g. facebook for a direct link to an entry.
          Note: Output can be quite big, as it contains everything for a given magazine.
      operationId: "getMagazineByName"
      produces:
        - "application/json"
      parameters:
        - name: "magazine-name"
          in: path
          description: magazine-name to fetch.
          type: string
          required: true
      responses:
        # Response code
        200:
          description: OK
        404:
          description: A magazine with the specified name was not found.

  /v2/magazines/{magazine-name}/issues:
    get:
      tags:
        - "zxinfo"
      summary: "Fetches basic issue info for single magazine by name"
      description: |
        This method fetches all basic issue info for a single magazine.
      operationId: "getIssuesByMagazineName"
      produces:
        - "application/json"
      parameters:
        - name: "magazine-name"
          in: path
          description: magazine-name to fetch.
          type: string
          required: true
      responses:
        # Response code
        200:
          description: |
            An array of basic issues info. Adds *X-Total-Count* to reponse header.

  /v2/magazines/{magazine-name}/issues/{issue-id}:
    get:
      tags:
        - "zxinfo"
      summary: "Fetches issue info for single magazine by name and issue-id"
      description: |
        This method fetches all issue info for a single magazine and issue-id.
      operationId: "getIssue"
      produces:
        - "application/json"
      parameters:
        - name: "magazine-name"
          in: path
          description: magazine-name to fetch.
          type: string
          required: true
        - name: "issue-id"
          in: path
          description: issue-id to fetch.
          type: string
          required: true
      responses:
        # Response code
        200:
          description: OK
        404:
          description: A magazine with the specified name and issue-id was not found.

  /v2/magazines/{magazine-name}/issues/{issue-id}/references:
    get:
      tags:
        - "zxinfo"
      summary: "Fetches references in an issue"
      description: |
        This method fetches all references for a single magazine and issue-id.
      operationId: "getIssueReferences"
      produces:
        - "application/json"
      parameters:
        - name: "magazine-name"
          in: path
          description: magazine-name to fetch.
          type: string
          required: true
        - name: "issue-id"
          in: path
          description: issue-id to fetch.
          type: string
          required: true
      responses:
        # Response code
        200:
          description: OK
        404:
          description: A magazine with the specified name and issue-id was not found.

  /v2/magazines/{magazine-name}/issues/{issue-id}/files:
    get:
      tags:
        - "zxinfo"
      summary: "Fetches files for an issue"
      description: |
        This method fetches all files for a single magazine and issue-id.
      operationId: "getIssueFiles"
      produces:
        - "application/json"
      parameters:
        - name: "magazine-name"
          in: path
          description: magazine-name to fetch.
          type: string
          required: true
        - name: "issue-id"
          in: path
          description: issue-id to fetch.
          type: string
          required: true
      responses:
        # Response code
        200:
          description: OK
        404:
          description: A magazine with the specified name and issue-id was not found.

  /v2/metadata/:
    get:
      tags:
        - "zxinfo"
      summary: "Returns list of metadata available"
      description: |
        Fetches a list of metadata:
        Return list of possible values for the following:
        * machinetype
        * genretypes
        * features

        Intended to be used as input to /search

      operationId: "getMetaData"
      produces:
        - "application/json"
      responses:
        # Response code
        200:
          description: OK

  /suggest/{term}:
    get:
      tags:
        - "zxinfo"
      summary: "Returns list of suggestions"
      description: |
        Fetches a list of suggestions for input term:
        Generates suggestions for titles, publishers and authors.

      operationId: "getSuggestions"
      produces:
        - "application/json"
      parameters:
        - name: "term"
          in: path
          description: input for suggestions
          type: string
          required: true
      responses:
        # Response code
        200:
          description: OK

  /suggest/author/{term}:
    get:
      tags:
        - "zxinfo"
      summary: "Returns list of suggestions"
      description: |
        Fetches a list of suggestions for input term:
        Generates suggestions for authors.

      operationId: "getSuggestionsAuthor"
      produces:
        - "application/json"
      parameters:
        - name: "term"
          in: path
          description: input for suggestions
          type: string
          required: true
      responses:
        # Response code
        200:
          description: OK

  /suggest/publisher/{term}:
    get:
      tags:
        - "zxinfo"
      summary: "Returns list of suggestions"
      description: |
        Fetches a list of suggestions for input term:
        Generates suggestions for publishers.

      operationId: "getSuggestionsPublisher"
      produces:
        - "application/json"
      parameters:
        - name: "term"
          in: path
          description: input for suggestions
          type: string
          required: true
      responses:
        # Response code
        200:
          description: OK

  /graph/path/{fromName}/{toName}:
    get:
      tags:
        - "zxinfo"
      summary: "Returns path between two names"
      description: |
        Returns detailed path between two names. Inspired by the Six degrees of separation.

      operationId: "getSixDegrees"
      produces:
        - "application/json"
      parameters:
        - name: "fromName"
          in: path
          description: Name to start from
          type: string
          required: true
        - name: "toName"
          in: path
          description: Name to end with
          type: string
          required: true
      responses:
        # Response code
        200:
          description: OK
